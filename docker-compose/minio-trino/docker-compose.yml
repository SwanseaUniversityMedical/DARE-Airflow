version: '3.7'

#  minio:
#    image: minio/minio
#    container_name: minio
#    depends_on:
#      - rabbitmq
#    ports:
#      - "9000:9000"
#      - "9001:9001"
#    volumes:
#      - minio_storage:/data
#    environment:
#      MINIO_ROOT_USER: minio
#      MINIO_ROOT_PASSWORD: minioadmin
#      MINIO_NOTIFY_AMQP_ENABLE_primary: on
#      MINIO_NOTIFY_AMQP_URL_primary: 'amqp://guest:guest@rabbitmq:5672'
#      MINIO_NOTIFY_AMQP_EXCHANGE_primary: minio
#      MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_primary: fanout
#      MINIO_NOTIFY_AMQP_DURABLE_primary: on
#      MINIO_NOTIFY_AMQP_ROUTING_KEY_SERP: xx 
#    command: server --console-address ":9001" /data
#    networks:
#        - miniotrino

# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2023-06-02T23-17-26Z
  command: server --console-address ":9001" http://minio{1...4}/data{1...2}
  expose:
    - "9000"
    - "9001"
    - "30000-40000"
  networks:
      - miniotrino
  depends_on:      
      - rabbitmq
  environment:
    - MINIO_ROOT_USER= minio
    - MINIO_ROOT_PASSWORD= minioadmin
    - MINIO_NOTIFY_AMQP_ENABLE_primary=on
    - MINIO_NOTIFY_AMQP_URL_primary=amqp://guest:guest@rabbitmq:5672
    - MINIO_NOTIFY_AMQP_EXCHANGE_primary=minio
    - MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_primary=fanout
    - MINIO_NOTIFY_AMQP_DURABLE_primary=on
    - MINIO_NOTIFY_AMQP_ROUTING_KEY_SERP=xx 
#    - MINIO_POLICY_PLUGIN_URL=http://192.168.1.75:8181/v1/data/httpapi/authz/allow
#    - ftp="address=:8021"
#    - ftp="passive-port-range=30000-40000" 
#    - sftp="address=:8022" 
#    - sftp="ssh-private-key=/home/miniouser/.ssh/id_rsa"
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

# starts 4 docker containers running minio server instances.
# using nginx reverse proxy, load balancing, you can access
# it through port 9000.
services:
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - data1-1:/data1
      - data1-2:/data2
#    ports:
#      - "8022:8022"
#      - "30000-40000"
    
  minio2:
    <<: *minio-common
    hostname: minio2
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  minio3:
    <<: *minio-common
    hostname: minio3
    volumes:
      - data3-1:/data1
      - data3-2:/data2

  minio4:
    <<: *minio-common
    hostname: minio4
    volumes:
      - data4-1:/data1
      - data4-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: minio
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - miniotrino      
    depends_on:
      - minio1
      - minio2
      - minio3
      - minio4
      - rabbitmq

  # To Create Minio bucket and upload iris parquet file.
  mc:
    depends_on:
      - nginx
    image: minio/mc
    container_name: mc
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 minio minioadmin) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/iris;
      /usr/bin/mc mb minio/iris;
      /usr/bin/mc policy set public minio/iris;
      /usr/bin/mc cp /data/iris.parq minio/iris/iris.parq;
      /usr/bin/mc rm -r --force minio/data;
      /usr/bin/mc mb minio/data;
      /usr/bin/mc policy set public minio/data;
      /usr/bin/mc rm -r --force minio/default;
      /usr/bin/mc mb minio/default;
      /usr/bin/mc policy set public minio/default;
      /usr/bin/mc rm -r --force minio/loading;
      /usr/bin/mc mb minio/loading;
      /usr/bin/mc policy set public minio/loading;
      /usr/bin/mc rm -r --force minio/working;
      /usr/bin/mc mb minio/working;
      /usr/bin/mc policy set public minio/working;
      /usr/bin/mc rm -r --force minio/ingest;
      /usr/bin/mc mb minio/ingest;
      /usr/bin/mc policy set public minio/ingest;
      exit 0;
      "
    networks:
      - miniotrino
    volumes:
      - ./data/iris.parq:/data/iris.parq

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
        - 5672:5672
        - 15672:15672
    environment:
        RABBITMQ_DEFAULT_USER: guest
        RABBITMQ_DEFAULT_PASS: guest
    volumes:
        - rabbitdata:/var/lib/rabbitmq/
        - rabbitlog:/var/log/rabbitmq
        - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
        - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
        - miniotrino
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  trino-coordinator:
    image: 'trinodb/trino:438'
    hostname: trino-coordinator
    depends_on:
      - nginx
      - hive-metastore
    ports:
      - '8090:8080'
    volumes:
      - ./etc:/etc/trino
    networks:
      - miniotrino

  mariadb:
    image: 'mariadb:lts'
    hostname: mariadb
    ports:
      - '3307:3306'
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_USER: admin
      MYSQL_PASSWORD: admin
      MYSQL_DATABASE: metastore_db
    command: ' --max_allowed_packet=67108864'
    volumes:
      - mariddbdata:/var/lib/mysql
    networks:
      - miniotrino
    
  hive-metastore:
    hostname: hive-metastore
    image: 'bitsondatadev/hive-metastore:latest'
    depends_on:
      - mariadb
    ports:
      - '9083:9083'
    volumes:
      - ./conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
    environment:
      METASTORE_DB_HOSTNAME: mariadb
    networks:
      - miniotrino

networks:
  miniotrino:
    driver: bridge

volumes:
  rabbitdata: {}
  rabbitlog: {}
  mariddbdata: {}
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2: